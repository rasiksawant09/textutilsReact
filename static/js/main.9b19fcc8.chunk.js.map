{"version":3,"sources":["components/Alert.js","components/About.js","components/NavBar.js","components/TextForm.js","App.js","reportWebVitals.js","index.js"],"names":["Alert","props","style","height","alert","className","type","role","word","lower","toLowerCase","charAt","toUpperCase","slice","capitalize","msg","About","myStyle","color","mode","backgroundColor","border","borderColor","id","NavBar","to","title","aboutText","onClick","toggleMode","htmlFor","defaultProps","TextForm","useState","text","setText","heading","value","onChange","event","console","log","target","rows","disabled","length","showAlert","newText","i","document","getElementById","select","navigator","clipboard","writeText","getSelection","removeAllRanges","split","join","filter","element","App","setMode","setAlert","message","setTimeout","body","exact","path","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.9b19fcc8.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nfunction Alert(props) {\r\n// {/* We used props.alert && beacuse we have given the inital state of alert State as null so when the  state is not null then only the alert will triggerred*/}\r\n\r\nconst capitalize = (word) =>{\r\n    const lower = word.toLowerCase();\r\n    return lower.charAt(0).toUpperCase() + lower.slice(1);\r\n}\r\n    return (\r\n       <div style= {{height: '50px'}}>\r\n           {props.alert && <div>\r\n            <div className={`alert alert-${props.alert.type} alert-dismissible fade show`} role=\"alert\">\r\n                <strong>{capitalize(props.alert.type)}</strong>: {props.alert.msg}\r\n                {/* <button type=\"button\" className=\"btn-close\" data-bs-dismiss=\"alert\" aria-label=\"Close\"></button> */}\r\n            </div>\r\n        </div>}\r\n       </div>\r\n    )\r\n    \r\n} \r\n\r\nexport default Alert\r\n\r\n","// import React, {useState} from 'react'\r\nimport React from 'react'\r\n\r\n\r\n// let myStyle = {\r\n//     color: 'white',\r\n//     backgroundColor: \"black\"\r\n// }\r\n\r\nexport const About = (props) => {\r\n\r\n    let myStyle = {\r\n        color: props.mode === \"dark\"?\"white\":\"#05354b\",\r\n        backgroundColor: props.mode === \"dark\" ? \"rgb(79 137 164)\":\"white\",\r\n        border: '2px white',\r\n        borderColor: props.mode === \"dark\" ? \"white\": \"#05354b\"\r\n    }\r\n    // const [myStyle, setMyStyle] = useState({\r\n    //     color: 'white',\r\n    //     backgroundColor: \"black\",\r\n       \r\n    // })\r\n    \r\n    // const [btntext, setBtnText] = useState(\"Enable Dark Mode\")\r\n    \r\n    // const toggleStyle = () =>{\r\n    //     if(myStyle.color === 'white'){\r\n    \r\n    //         setMyStyle({\r\n    //             color: 'black',\r\n    //             backgroundColor: \"white\",\r\n    //             border: '1px solid white'\r\n    //         })\r\n    //         setBtnText(\"Enable Light mode\")\r\n    //     }\r\n    //     else{\r\n    //         setMyStyle({\r\n    //             color: 'white',\r\n    //             backgroundColor: 'black'\r\n    //         })\r\n    //         setBtnText(\"Enable Dark mode\")\r\n            \r\n    //     }\r\n    \r\n    //     }\r\n    return (\r\n        <div className=\"container\" style={{color: props.mode === \"dark\"?\"white\":\"#05354b\"}}>\r\n            <h1 className=\"my-4\">About Us</h1>\r\n            <div className=\"accordion\" id=\"accordionExample\">\r\n        <div className=\"accordion-item\">\r\n            <h2 className=\"accordion-header\" id=\"headingOne\">\r\n            <button className=\"accordion-button\" type=\"button\" style={myStyle} data-bs-toggle=\"collapse\" data-bs-target=\"#collapseOne\" aria-expanded=\"true\" aria-controls=\"collapseOne\">\r\n               <strong>Analyze your text quickly.</strong>\r\n            </button>\r\n            </h2>\r\n            <div id=\"collapseOne\" className=\"accordion-collapse collapse show\" aria-labelledby=\"headingOne\" data-bs-parent=\"#accordionExample\">\r\n            <div className=\"accordion-body\" style={myStyle}>\r\n                TextUtils give you a way to analyze your text quickly and efficently. Be it word count or character count.\r\n            </div>\r\n            </div>\r\n        </div>\r\n        <div className=\"accordion-item\">\r\n            <h2 className=\"accordion-header\" id=\"headingTwo\">\r\n            <button className=\"accordion-button collapsed\" type=\"button\"  style={myStyle} data-bs-toggle=\"collapse\" data-bs-target=\"#collapseTwo\" aria-expanded=\"false\" aria-controls=\"collapseTwo\">\r\n                <strong>Free to Use</strong>\r\n            </button>\r\n            </h2>\r\n            <div id=\"collapseTwo\" className=\"accordion-collapse collapse\" aria-labelledby=\"headingTwo\" data-bs-parent=\"#accordionExample\">\r\n            <div className=\"accordion-body\" style={myStyle}>\r\n            TextUtils is a free character counter tool that provides instant character count and work count statistics for a given text. TextUtils reports the \r\n                number of words and characters. thus it is suitable for writing text wirh word/ character limit.\r\n            </div>\r\n            </div>\r\n        </div>\r\n        <div className=\"accordion-item\">\r\n            <h2 className=\"accordion-header\" id=\"headingThree\">\r\n            <button className=\"accordion-button collapsed\" type=\"button\" style={myStyle} data-bs-toggle=\"collapse\" data-bs-target=\"#collapseThree\" aria-expanded=\"false\" aria-controls=\"collapseThree\">\r\n               <strong>Browser Compatiblity.</strong>\r\n            </button>\r\n            </h2>\r\n            <div id=\"collapseThree\" className=\"accordion-collapse collapse\" aria-labelledby=\"headingThree\" data-bs-parent=\"#accordionExample\">\r\n            <div className=\"accordion-body\" style={myStyle}>\r\n                This software works on any web browser such as Chrome, FireFox, Internet Explorer, Safari, opera. It suits to count\r\n                charcters in facebook, blog, books, excel document, pdf document, essays, etc.\r\n            </div>\r\n            </div>\r\n        </div>\r\n        </div>\r\n\r\n        {/* <button onClick={toggleStyle} type=\"button\" className=\"btn btn-primary my-4\"> {btntext} </button> */}\r\n\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport { Link } from 'react-router-dom'\r\n\r\n\r\nexport const NavBar = (props) => {\r\n    return (\r\n        <nav className={` navbar navbar-expand-lg navbar-${props.mode} bg-${props.mode} `}>\r\n  <div className=\"container-fluid\">\r\n    <Link className=\"navbar-brand\" to=\"/\">{props.title}</Link>\r\n    <button className=\"navbar-toggler\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n      <span className=\"navbar-toggler-icon\"></span>\r\n    </button>\r\n    <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n      <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\r\n        <li className=\"nav-item\">\r\n          {/* <a className=\"nav-link active\" aria-current=\"page\" href=\"/\">Home</a> */}\r\n          {/* We changed the href to link to use the react router property */}\r\n          <Link className=\"nav-link active\" aria-current=\"page\" to=\"/\">Home</Link>\r\n\r\n        </li>\r\n        <li className=\"nav-item\">\r\n          <Link className=\"nav-link\" to=\"/about\">{props.aboutText}</Link>\r\n        </li>\r\n      </ul>\r\n      <div className={`form-check form-switch text-${props.mode === 'light'?'dark':'light'}`}>\r\n        <input className=\"form-check-input\" onClick={props.toggleMode} type=\"checkbox\" role=\"switch\" id=\"flexSwitchCheckDefault\" />\r\n        <label className=\"form-check-label\" htmlFor=\"flexSwitchCheckDefault\">Enable Dark Mode</label>\r\n      </div>\r\n      {/* <form className=\"d-flex\">\r\n        <input className=\"form-control me-2\" type=\"search\" placeholder=\"Search\" aria-label=\"Search\" />\r\n        <button className=\"btn btn-primary\" type=\"submit\">Search</button>\r\n      </form> */}\r\n    </div>\r\n  </div>\r\n</nav>\r\n    )\r\n}\r\n\r\n// proTypes are used to catch error\r\nNavBar.propTypes = {\r\n    // title: PropTypes.string,\r\n    // it is mke a compulsory argument\r\n    title: PropTypes.string.isRequired,\r\n    aboutText: PropTypes.string\r\n}\r\n\r\nNavBar.defaultProps = {\r\n\r\n  title: \"Set title here\",\r\n  aboutText: \"Set the Text\"\r\n\r\n}","import React, {useState} from 'react'\r\n\r\nexport const TextForm = (props) => {\r\n\r\n    const handleUpclick = () =>{\r\n        console.log(\"Uppercase was clicked\" + text);\r\n        setText(text.toUpperCase());\r\n        props.showAlert(\"Converted to UpperCase\", \"success\");\r\n    }\r\n    const handleLoclick = () =>{\r\n        console.log(\"Lowercase was clicked\" + text);\r\n        setText(text.toLowerCase());\r\n        props.showAlert(\"Converted to LowerCase\",\"success\");\r\n\r\n    }\r\n    const handleClearclick = () =>{\r\n        console.log(\"Lowercase was clicked\" + text);\r\n        let newText = '';\r\n        setText(newText);\r\n        props.showAlert(\"Text is Cleared\", \"success\");\r\n    }\r\n\r\n    const handleCopy = () =>{\r\n        let newText = document.getElementById(\"myBox\");\r\n        newText.select();\r\n        navigator.clipboard.writeText(newText.value);\r\n        // the below line code removes all the selection the blue highlight comes.\r\n        document.getSelection().removeAllRanges();\r\n        props.showAlert(\"Text has been copied\", \"success\");\r\n    }\r\n\r\n    const handleExtraSpaces = () =>{\r\n        // The split works when their is more then one space because after split it will creat array adn in the next line we are joining the text\r\n        let newText = text.split(/[ ]+/)\r\n        setText(newText.join(\" \"));\r\n        props.showAlert(\"Extra Space have been removed\", \"success\");\r\n    }\r\n\r\n    const handleChCaseClick = () =>{\r\n        console.log(\"handleChCaseClick was clicked\" + text);\r\n        let newText = '';\r\n        for (let i = 0; i < text.length; i++) {\r\n            if (text.charAt(i) === text.charAt(i).toLowerCase()) {\r\n\r\n                newText += text.charAt(i).toUpperCase();\r\n                \r\n            } else {\r\n\r\n                newText += text.charAt(i).toLowerCase();\r\n                \r\n            }\r\n            \r\n        }\r\n        setText(newText);\r\n    }\r\n\r\n    // Allow us to change the text in the text area where event is used to listen and we are able to type\r\n    const handleOnChange = (event) =>{\r\n        console.log(\"handleOnChange is clicked\");\r\n        setText(event.target.value);\r\n    }\r\n\r\n    const [text, setText] = useState(\"Enter the text here\");\r\n    // text = 'new string' Wrong way ro cahnege the state\r\n    // setText(\"new Text\") //correct way to set the text\r\n\r\n    return (\r\n        <>\r\n        <div className=\"container\" style= {{color: props.mode === 'dark'?'white':'#05354b'}} >\r\n            <h1> {props.heading} </h1>\r\n            <div className=\"mb-3\">\r\n            {/* <label for=\"myBox\" className=\"form-label\">Example textarea</label> */}\r\n            <textarea className=\"form-control\" value={text} onChange={handleOnChange} style={{backgroundColor: props.mode === 'dark'?' rgb(71 188 203)':'white', color: props.mode=== 'dark'?'white':'#05354b' }} id=\"myBox\" rows=\"10\"></textarea>\r\n            </div>\r\n            <button disabled={text.length === 0} className=\"btn btn-primary mx-2 my-3\" onClick={handleUpclick} >Convert to Uppercase</button>\r\n            <button disabled={text.length === 0} className=\"btn btn-primary mx-2 my-3\" onClick={handleLoclick} >Convert to LowerCase</button>\r\n            <button disabled={text.length === 0} className=\"btn btn-primary mx-2 my-3\" onClick={handleClearclick} >Clear Text</button>\r\n            <button disabled={text.length === 0} className=\"btn btn-primary mx-2 my-3\" onClick={handleChCaseClick} >Change Case of Letters</button>\r\n            <button disabled={text.length === 0} className=\"btn btn-primary mx-2 my-3\" onClick={handleCopy} >Copy Text</button>\r\n            <button disabled={text.length === 0} className=\"btn btn-primary mx-2 my-3\" onClick={handleExtraSpaces} >Remove Extra Spaces</button>\r\n\r\n\r\n        </div>\r\n        <div className=\"container my-3\" style={{color: props.mode === 'dark'?'white':'#05354b'}}>\r\n            <h1>Your Text Summary is </h1>\r\n            <p>{text.split(/\\s+/).filter((element)=>{return element.length !== 0}).length} words and {text.length} characters</p>\r\n            <p>{0.08 * text.split(\" \").length } Minutes read</p>\r\n            <h2>Preview</h2>\r\n            {/* <p>{text}</p> */}\r\n            <p>{text.length>0?text:\"Nothing to Preview!\"}</p>\r\n\r\n        </div>\r\n        </>\r\n    )\r\n}\r\n","// import logo from './logo.svg';\nimport { useState } from 'react';\nimport './App.css';\nimport Alert from './components/Alert';\nimport { About } from './components/About';\nimport { NavBar } from './components/NavBar';\nimport { TextForm } from './components/TextForm';\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  // Link\n} from \"react-router-dom\";\n\n\n\nfunction App() {\n  const [mode, setMode] = useState('light'); // it specifies whether dark mode is enabled or not.\n  const [alert, setAlert] = useState(null);  //it will allow us to set the alert.\n\n  const showAlert = (message, type)=>{\n    setAlert({\n      msg: message,\n      type: type\n    })\n    setTimeout(() => {\n      setAlert(null);\n    }, 1500)\n  }\n\n  const toggleMode = () =>{\n    if (mode === 'light') {\n      setMode(\"dark\")\n      // document.body.style.backgroundColor = \"grey\";\n      document.body.style.backgroundColor = \"#05354b\";\n      showAlert(\"Dark Mode enabled\", \"success\")\n      document.title = \"TextUtils - DarkMode\"\n\n      \n    } else {\n      setMode(\"light\");\n      document.body.style.backgroundColor = \"white\";\n      showAlert(\"Light Mode enabled\", \"success\")\n      document.title = \"TextUtils - LightMode\"\n\n      \n    }\n  }\n\n  return (\n    <> \n       <Router>\n     {/* <NavBar title=\"TextUtils2s\" aboutText=\"AboutText\" /> */}\n     {/* <NavBar /> */}\n    \n     <NavBar title=\"TextUtils\" aboutText= \"About Us\" mode={mode} toggleMode={toggleMode} />\n     <Alert alert={alert} />\n     <div className=\"container my3\">\n     {/* <TextForm showAlert={showAlert} heading=\"Enter the Text to Analyze\" mode={mode} /> */}\n     {/* <About /> */}\n     <Switch>\n          <Route exact path=\"/about\">\n            <About mode={mode} />\n          </Route>\n          <Route exact path=\"/\">\n     <TextForm showAlert={showAlert} heading=\"Enter the Text to Analyze\" mode={mode} />\n\n          </Route>\n        </Switch>\n     </div>\n     </Router>\n     \n    </>\n\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}